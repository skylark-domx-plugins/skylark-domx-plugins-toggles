{"version":3,"sources":["skylark-domx-toggles.js"],"names":["define","skylark","attach","langx","browser","eventer","noder","geom","$","fuelux","Checkbox","plugins","Plugin","inherit","klassName","pluginName","options","ignoreVisibilityCheck","_construct","elm","this","overrided","$element","tagName","toLowerCase","Error","$label","$chk","find","$container","parent","css","match","containerSelector","attr","$toggleContainer","on","proxy","itemchecked","setInitialState","checked","prop","disabled","setCheckedState","setDisabledState","element","$lbl","$containerToggle","addClass","removeClass","trigger","evt","target","toggle","isChecked","uncheck","check","enable","disable","destroy","remove","outerHTML","prototype","getValue","register","toggles","Radio","$radio","groupName","resetGroup","$radios","each","index","item","main"],"mappings":"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","file":"../skylark-domx-toggles.js","sourcesContent":["define('skylark-domx-toggles/toggles',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.toggles\",{});\r\n});\ndefine('toggles',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.toggles\",{});\r\n});\ndefine('CheckBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx/browser\",\r\n  \"skylark-domx/eventer\",\r\n  \"skylark-domx/noder\",\r\n  \"skylark-domx/geom\",\r\n  \"skylark-domx/query\",\r\n  \"skylark-domx-plugins\",  \r\n  \"./toggles\"\r\n],function(langx,browser,eventer,noder,geom,$,fuelux){\r\n\r\n  var Checkbox = plugins.Plugin.inherit({\r\n    klassName: \"Checkbox\",\r\n\r\n    pluginName : \"lark.radio\",\r\n\r\n    options : {\r\n      ignoreVisibilityCheck: false\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n      var $element = this.$();\r\n\r\n      if (elm.tagName.toLowerCase() !== 'label') {\r\n        throw new Error('Checkbox must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/checkbox.html for example of proper markup. Call `.checkbox()` on the `<label>` not the `<input>`');\r\n        return;\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = $element;\r\n      this.$chk = this.$label.find('input[type=\"checkbox\"]');\r\n      this.$container = $element.parent('.checkbox'); // the container div\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$chk.css('visibility').match(/hidden|collapse/)) {\r\n        throw new Error('For accessibility reasons, in order for tab and space to function on checkbox, checkbox `<input />`\\'s `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$chk.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n      // handle internal events\r\n      this.$chk.on('change', langx.proxy(this.itemchecked, this));\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    setInitialState: function setInitialState () {\r\n      var $chk = this.$chk;\r\n\r\n      // get current state of input\r\n      var checked = $chk.prop('checked');\r\n      var disabled = $chk.prop('disabled');\r\n\r\n      // sync label class with input state\r\n      this.setCheckedState($chk, checked);\r\n      this.setDisabledState($chk, disabled);\r\n    },\r\n\r\n    setCheckedState: function setCheckedState (element, checked) {\r\n      var $chk = element;\r\n      var $lbl = this.$label;\r\n      var $containerToggle = this.$toggleContainer;\r\n\r\n      if (checked) {\r\n        $chk.prop('checked', true);\r\n        $lbl.addClass('checked');\r\n        $containerToggle.removeClass('hide hidden');\r\n        $lbl.trigger('checked.fu.checkbox');\r\n      } else {\r\n        $chk.prop('checked', false);\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n        $lbl.trigger('unchecked.fu.checkbox');\r\n      }\r\n\r\n      $lbl.trigger('changed.fu.checkbox', checked);\r\n    },\r\n\r\n    setDisabledState: function (element, disabled) {\r\n      var $chk = $(element);\r\n      var $lbl = this.$label;\r\n\r\n      if (disabled) {\r\n        $chk.prop('disabled', true);\r\n        $lbl.addClass('disabled');\r\n        $lbl.trigger('disabled.fu.checkbox');\r\n      } else {\r\n        $chk.prop('disabled', false);\r\n        $lbl.removeClass('disabled');\r\n        $lbl.trigger('enabled.fu.checkbox');\r\n      }\r\n\r\n      return $chk;\r\n    },\r\n\r\n    itemchecked: function (evt) {\r\n      var $chk = $(evt.target);\r\n      var checked = $chk.prop('checked');\r\n\r\n      this.setCheckedState($chk, checked);\r\n    },\r\n\r\n    toggle: function () {\r\n      var checked = this.isChecked();\r\n\r\n      if (checked) {\r\n        this.uncheck();\r\n      } else {\r\n        this.check();\r\n      }\r\n    },\r\n\r\n    check: function () {\r\n      this.setCheckedState(this.$chk, true);\r\n    },\r\n\r\n    uncheck: function () {\r\n      this.setCheckedState(this.$chk, false);\r\n    },\r\n\r\n    isChecked: function () {\r\n      var checked = this.$chk.prop('checked');\r\n      return checked;\r\n    },\r\n\r\n    enable: function () {\r\n      this.setDisabledState(this.$chk, false);\r\n    },\r\n\r\n    disable: function () {\r\n      this.setDisabledState(this.$chk, true);\r\n    },\r\n\r\n    destroy: function () {\r\n      this.$label.remove();\r\n      return this.$label[0].outerHTML;\r\n    }\r\n  });\r\n\r\n\r\n  Checkbox.prototype.getValue = Checkbox.prototype.isChecked;\r\n\r\n  plugins.register(Checkbox);\r\n\r\n  return toggles.Checkbox = Checkbox;\r\n});\r\n\ndefine('Radio',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx/browser\",\r\n  \"skylark-domx/eventer\",\r\n  \"skylark-domx/noder\",\r\n  \"skylark-domx/geom\",\r\n  \"skylark-domx/query\",\r\n  \"skylark-domx-plugins\",  \r\n  \"./toggles\"\r\n],function(langx,browser,eventer,noder,geom,$,fuelux){\r\n\r\n\r\n  var Radio = plugins.Plugin.inherit({\r\n    klassName: \"Radio\",\r\n\r\n    pluginName : \"domx.radio\",\r\n\r\n    options : {\r\n      ignoreVisibilityCheck: false\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n      if (elm.tagName.toLowerCase() !== 'label') {\r\n        throw new Error('Radio must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/radio.html for example of proper markup. Call `.radio()` on the `<label>` not the `<input>`');\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = this.$();\r\n      this.$radio = this.$label.find('input[type=\"radio\"]');\r\n      this.groupName = this.$radio.attr('name'); // don't cache group itself since items can be added programmatically\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$radio.css('visibility').match(/hidden|collapse/)) {\r\n        throw new Error('For accessibility reasons, in order for tab and space to function on radio, `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$radio.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n      // handle internal events\r\n      this.$radio.on('change', langx.proxy(this.itemchecked, this));\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    setInitialState: function setInitialState () {\r\n      var $radio = this.$radio;\r\n\r\n      // get current state of input\r\n      var checked = $radio.prop('checked');\r\n      var disabled = $radio.prop('disabled');\r\n\r\n      // sync label class with input state\r\n      this.setCheckedState($radio, checked);\r\n      this.setDisabledState($radio, disabled);\r\n    },\r\n\r\n    resetGroup: function resetGroup () {\r\n      var $radios = $('input[name=\"' + this.groupName + '\"]');\r\n      $radios.each(function resetRadio (index, item) {\r\n        var $radio = $(item);\r\n        var $lbl = $radio.parent();\r\n        var containerSelector = $radio.attr('data-toggle');\r\n        var $containerToggle = $(containerSelector);\r\n\r\n\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n      });\r\n    },\r\n\r\n    setCheckedState: function setCheckedState (element, checked) {\r\n      var $radio = element;\r\n      var $lbl = $radio.parent();\r\n      var containerSelector = $radio.attr('data-toggle');\r\n      var $containerToggle = $(containerSelector);\r\n\r\n      if (checked) {\r\n        // reset all items in group\r\n        this.resetGroup();\r\n\r\n        $radio.prop('checked', true);\r\n        $lbl.addClass('checked');\r\n        $containerToggle.removeClass('hide hidden');\r\n        $lbl.trigger('checked.fu.radio');\r\n      } else {\r\n        $radio.prop('checked', false);\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n        $lbl.trigger('unchecked.fu.radio');\r\n      }\r\n\r\n      $lbl.trigger('changed.fu.radio', checked);\r\n    },\r\n\r\n    setDisabledState: function setDisabledState (element, disabled) {\r\n      var $radio = $(element);\r\n      var $lbl = this.$label;\r\n\r\n      if (disabled) {\r\n        $radio.prop('disabled', true);\r\n        $lbl.addClass('disabled');\r\n        $lbl.trigger('disabled.fu.radio');\r\n      } else {\r\n        $radio.prop('disabled', false);\r\n        $lbl.removeClass('disabled');\r\n        $lbl.trigger('enabled.fu.radio');\r\n      }\r\n\r\n      return $radio;\r\n    },\r\n\r\n    itemchecked: function itemchecked (evt) {\r\n      var $radio = $(evt.target);\r\n      this.setCheckedState($radio, true);\r\n    },\r\n\r\n    check: function check () {\r\n      this.setCheckedState(this.$radio, true);\r\n    },\r\n\r\n    uncheck: function uncheck () {\r\n      this.setCheckedState(this.$radio, false);\r\n    },\r\n\r\n    isChecked: function isChecked () {\r\n      var checked = this.$radio.prop('checked');\r\n      return checked;\r\n    },\r\n\r\n    enable: function enable () {\r\n      this.setDisabledState(this.$radio, false);\r\n    },\r\n\r\n    disable: function disable () {\r\n      this.setDisabledState(this.$radio, true);\r\n    },\r\n\r\n    destroy: function destroy () {\r\n      this.$label.remove();\r\n      return this.$label[0].outerHTML;\r\n    }\r\n\r\n  });\r\n\r\n\r\n  Radio.prototype.getValue = Radio.prototype.isChecked;\r\n\r\n  plugins.register(Radio);\r\n\r\n  return toggles.Radio = Radio;\r\n});\r\n\ndefine('skylark-domx-toggles/main',[\r\n\t\"./toggles\",\r\n\t\"CheckBox\",\r\n\t\"Radio\"\r\n],function(toggles){\r\n\treturn toggles;\r\n});\ndefine('skylark-domx-toggles', ['skylark-domx-toggles/main'], function (main) { return main; });\n\n"]}